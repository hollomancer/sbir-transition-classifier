name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write

jobs:
  test:
    name: Run tests and coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Cache Poetry and pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-pip-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-pip-${{ matrix.python-version }}-

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Configure Poetry for CI (no venv creation)
        run: |
          poetry config virtualenvs.create false --local

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run tests with coverage
        env:
          # Avoid creating PYTHONHASHSEED differences; keep deterministic test runs where needed
          PYTHONUNBUFFERED: 1
        run: |
          poetry run pytest --maxfail=1 --disable-warnings --cov=sbir_transition_classifier --cov-report=xml --cov-report=term-missing

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Upload test results (JUnit) if produced
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-junit
          path: junit.xml

      - name: Optionally send coverage to Codecov
        if: ${{ secrets.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
